// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/24/2018 22:15:43"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    final
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module final_vlg_sample_tst(
	badapple,
	CLK,
	EN,
	sakura,
	sampler_tx
);
input  badapple;
input  CLK;
input  EN;
input  sakura;
output sampler_tx;

reg sample;
time current_time;
always @(badapple or CLK or EN or sakura)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module final_vlg_check_tst (
	B,
	G,
	HS,
	R,
	SPK,
	VS,
	sampler_rx
);
input  B;
input  G;
input  HS;
input  R;
input  SPK;
input  VS;
input sampler_rx;

reg  B_expected;
reg  G_expected;
reg  HS_expected;
reg  R_expected;
reg  SPK_expected;
reg  VS_expected;

reg  B_prev;
reg  G_prev;
reg  HS_prev;
reg  R_prev;
reg  SPK_prev;
reg  VS_prev;

reg  B_expected_prev;
reg  G_expected_prev;
reg  HS_expected_prev;
reg  R_expected_prev;
reg  SPK_expected_prev;
reg  VS_expected_prev;

reg  last_B_exp;
reg  last_G_exp;
reg  last_HS_exp;
reg  last_R_exp;
reg  last_SPK_exp;
reg  last_VS_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	B_prev = B;
	G_prev = G;
	HS_prev = HS;
	R_prev = R;
	SPK_prev = SPK;
	VS_prev = VS;
end

// update expected /o prevs

always @(trigger)
begin
	B_expected_prev = B_expected;
	G_expected_prev = G_expected;
	HS_expected_prev = HS_expected;
	R_expected_prev = R_expected;
	SPK_expected_prev = SPK_expected;
	VS_expected_prev = VS_expected;
end



// expected B
initial
begin
	B_expected = 1'bX;
end 

// expected G
initial
begin
	G_expected = 1'bX;
end 

// expected HS
initial
begin
	HS_expected = 1'bX;
end 

// expected R
initial
begin
	R_expected = 1'bX;
end 

// expected SPK
initial
begin
	SPK_expected = 1'bX;
end 

// expected VS
initial
begin
	VS_expected = 1'bX;
end 
// generate trigger
always @(B_expected or B or G_expected or G or HS_expected or HS or R_expected or R or SPK_expected or SPK or VS_expected or VS)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected B = %b | expected G = %b | expected HS = %b | expected R = %b | expected SPK = %b | expected VS = %b | ",B_expected_prev,G_expected_prev,HS_expected_prev,R_expected_prev,SPK_expected_prev,VS_expected_prev);
	$display("| real B = %b | real G = %b | real HS = %b | real R = %b | real SPK = %b | real VS = %b | ",B_prev,G_prev,HS_prev,R_prev,SPK_prev,VS_prev);
`endif
	if (
		( B_expected_prev !== 1'bx ) && ( B_prev !== B_expected_prev )
		&& ((B_expected_prev !== last_B_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_B_exp = B_expected_prev;
	end
	if (
		( G_expected_prev !== 1'bx ) && ( G_prev !== G_expected_prev )
		&& ((G_expected_prev !== last_G_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_expected_prev);
		$display ("     Real value = %b", G_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_G_exp = G_expected_prev;
	end
	if (
		( HS_expected_prev !== 1'bx ) && ( HS_prev !== HS_expected_prev )
		&& ((HS_expected_prev !== last_HS_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HS :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HS_expected_prev);
		$display ("     Real value = %b", HS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_HS_exp = HS_expected_prev;
	end
	if (
		( R_expected_prev !== 1'bx ) && ( R_prev !== R_expected_prev )
		&& ((R_expected_prev !== last_R_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R_exp = R_expected_prev;
	end
	if (
		( SPK_expected_prev !== 1'bx ) && ( SPK_prev !== SPK_expected_prev )
		&& ((SPK_expected_prev !== last_SPK_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SPK :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SPK_expected_prev);
		$display ("     Real value = %b", SPK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SPK_exp = SPK_expected_prev;
	end
	if (
		( VS_expected_prev !== 1'bx ) && ( VS_prev !== VS_expected_prev )
		&& ((VS_expected_prev !== last_VS_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VS :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VS_expected_prev);
		$display ("     Real value = %b", VS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_VS_exp = VS_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module final_vlg_vec_tst();
// constants                                           
// general purpose registers
reg badapple;
reg CLK;
reg EN;
reg sakura;
// wires                                               
wire B;
wire G;
wire HS;
wire R;
wire SPK;
wire VS;

wire sampler;                             

// assign statements (if any)                          
final i1 (
// port map - connection between master ports and signals/registers   
	.B(B),
	.badapple(badapple),
	.CLK(CLK),
	.EN(EN),
	.G(G),
	.HS(HS),
	.R(R),
	.sakura(sakura),
	.SPK(SPK),
	.VS(VS)
);

// badapple
initial
begin
	badapple = 1'b1;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #500 1'b1;
	#500;
end 

// EN
initial
begin
	EN = 1'b1;
end 

// sakura
initial
begin
	sakura = 1'b0;
end 

final_vlg_sample_tst tb_sample (
	.badapple(badapple),
	.CLK(CLK),
	.EN(EN),
	.sakura(sakura),
	.sampler_tx(sampler)
);

final_vlg_check_tst tb_out(
	.B(B),
	.G(G),
	.HS(HS),
	.R(R),
	.SPK(SPK),
	.VS(VS),
	.sampler_rx(sampler)
);
endmodule

